一、init进程作用用户空间的第一个进程
1、创建zygote
2、提供property Service
3、main()
	mkdir("/proc", 0755);
	mount("proc", "/proc", "proc", 0, NULL); --创建一些文件夹，并挂载设备
	open_devnull_stdio(); --重定向标准输入、输出、错误到/dev/null
	klog_init(); --设置init的log输出
    ...
	property_init();
		init_property_area(); --初始化存储区域
			创建共享内存
		init_workspace()
	property_load_boot_defaults(); -- 初始化属性
	property_service_init_action() -- 启动progerty服务
		start_property_service();-- 启动属性服务（用来设置属性），创建一个socket
	
	init_parse_config_file("/init.rc"); -- 解析init.rc
	get_hardware_name(hardware, &revision); -- 读取/proc/cpuinfo获取机器的hardware名
	parce_config_file -- 解析和机器相关的配置文件
	
	
	action_for_each_trigger("early-init", action_add_queue_tail);	
	action_for_each_trigger("init", action_add_queue_tail);
	action_for_each_trigger("early-boot", action_add_queue_tail);     
	action_for_each_trigger("boot", action_add_queue_tail);
		--启动zygote -- 运行/system/bin/app_process
		--打开socket,同时public出去(ANDROID_SOCKET_zygote)
		service zygote /system/bin/app_process -Xzygote /system/bin --zygote --start-system-server
		class main
		socket zygote stream 660 root system
		onrestart write /sys/android_power/request_state wake
		onrestart write /sys/power/state on
		onrestart restart media
		onrestart restart netd
		
		
	while()
		监听property、keychord、signal
		
		restart_processes();//重启那些需要重启的应用,标识为Restarting的进程
		
		 handle_property_set_fd();//监听property service 创建的socket
			执行相应的设置（创建的共享内存只有读的权限，所以都是通过本进程进行设置，同时还处理一些相应的控制命令）
			客户端通过property_set()
				send_prop_msg()
					通过socket，设置到服务端
		 handle_keychord();
		 
		 handle_signal();//信号监听，用于监听子进程死掉
			wait_for_one_process(0)--标识已经死掉的应用为Restarting